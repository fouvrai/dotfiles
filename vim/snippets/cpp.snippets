# Read File Into Vector
snippet readfile
	std::vector<char> v;
	if (FILE *${2:fp} = fopen(${1:"filename"}, "r")) {
		char buf[1024];
		while (size_t len = fread(buf, 1, sizeof(buf), $2))
			v.insert(v.end(), buf, buf + len);
		fclose($2);
	}${3}
# std::map
snippet map
	std::map<${1:key}, ${2:value}> map${3};
# std::vector
snippet vector
	std::vector<${1:char}> v${2};
# Namespace
snippet ns
	namespace ${1:`Filename('', 'my')`} {
		${2}
	} /* $1 */
# Class
snippet cl
	class ${1:`Filename('$1_t', 'name')`} {
	public:
		$1 (${2:arguments});
		virtual ~$1 ();
	
	private:
		${3:/* data */}
	};

##################################################
# Copyright
#

snippet msft
	//
	// Copyright (C) Microsoft Corporation.  All rights reserved.
	//

##################################################
# Chk Macros
#

snippet chkin
	ChkIfA(${1:p} == NULL, E_INVALIDARG);${2}

snippet chkstr
	ChkIfA(${1:pwz} == NULL, E_INVALIDARG);
	ChkIfA($1[0] == L'0', E_INVALIDARG);${2}

snippet chkout
	ChkIfA(${1:pp} == NULL, E_POINTER);${2}

snippet chkexp
	ChkIfA(${1:_sp} == NULL, E_UNEXPECTED);${2}

##################################################
# HRESULT
#

snippet hr
	{
		HRESULT hr = S_OK;

		${1}

	Cleanup:
		return hr;
	}

##################################################
# Files
#

snippet h
	//
	// Copyright (C) Microsoft Corporation.  All rights reserved.
	//

	#pragma once

snippet cpp
	//
	// Copyright (C) Microsoft Corporation.  All rights reserved.
	//

	#include "precomp.h"
	#include "`Filename()`.h"

	${1}

	//
	// Protected
	//

	`Filename()`::`Filename()`()
	{
	}

	`Filename()`::~`Filename()`()
	{
	}

snippet i
	IFACEMETHODIMP `Filename()`::${1}(${2})
	{
		HRESULT hr = S_OK;

		${3}

	Cleanup:
		return hr;
	}

snippet m
	HRESULT `Filename()`::${1}(${2})
	{
		HRESULT hr = S_OK;

		${3}

	Cleanup:
		return hr;
	}

##################################################
# COM
#

snippet inf
	DECLARE_INTERFACE_IID_(${1:iname}, IUnknown, `strpart(system('uuidgen -c'), 0, 36)`)
	{
		${2}
	};

snippet s
	STDMETHOD(${1})(${2}) = 0;${3}

