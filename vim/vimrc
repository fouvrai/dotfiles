
""""""""""""""""""""""""""""""""""""""""""""""""""
" General
"

" behave less like vi (i.e. more vim features)
set nocompatible

" behave like windows instead of xterm
source $VIMRUNTIME/mswin.vim

" don't dump swap files in cwd
set directory-=.
set directory+=$TEMP

" load filetype plugins
filetype plugin on

""""""""""""""""""""""""""""""""""""""""""""""""""
" Pathogen
"

" set up pathogen runtime path manipulation
runtime bundle/pathogen/autoload/pathogen.vim
call pathogen#infect()

""""""""""""""""""""""""""""""""""""""""""""""""""
" GUI
"

" use my screen real estate
if !exists("loaded_vimrc")
    set lines=60
    set columns=120
endif

" minimize the gui
set guioptions=r

""""""""""""""""""""""""""""""""""""""""""""""""""
" Fonts & Colors
"

" turn on syntax highlighting
syntax on

" use a better font
set guifont=Consolas:h9

" set the default color scheme
set background=dark
colorscheme solarized

""""""""""""""""""""""""""""""""""""""""""""""""""
" Tabs
"

" copy indent from current line when starting a new line
" and use per-filetype indentation rules
set autoindent
filetype indent on

" filetype indent does weird things with #
inoremap # X#

" tabs are 4 spaces
set tabstop=4

" tabs feel like 4 spaces
set softtabstop=4

" autoindents are 4 spaces
set shiftwidth=4

" use spaces instead of tabs
set expandtab

""""""""""""""""""""""""""""""""""""""""""""""""""
" User Interface
"

" don't wrap lines
set nowrap

" show line numbers
set number

" folding is awful
set nofoldenable

" show tabs and trailing spaces
set listchars=tab:»·,trail:•
set list

" flash matched parentheses, brackets, and braces
set showmatch

" flash instead of beep for errors
set visualbell

" don't redraw when running macros
set lazyredraw

" change the default status line
" and always display it
set statusline=%t\ [%Y%M%R]\ CWD=%{getcwd()}%=Line:\ %l/%L%9(Col:\ %02c%)
set laststatus=2

" show matches for command completion
set wildmenu

" show the popup even for just one match
set completeopt=menu,menuone,preview

""""""""""""""""""""""""""""""""""""""""""""""""""
" Movement
"

" keep four lines when scrolling
set scrolloff=3

" move freely between lines
set whichwrap+=<,>,[,],h,l

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

""""""""""""""""""""""""""""""""""""""""""""""""""
" Searching
"

" make searches case insensitive
" unless they're mixed case
set ignorecase
set smartcase

" search while typing
set incsearch

" do not highlight the last used search term
set nohlsearch

" by default we want substitutions to occur in the entire line
set gdefault

""""""""""""""""""""""""""""""""""""""""""""""""""
" Files
"

" allow switching buffers without saving
set hidden

" automatically set our working dir to the current file
set autochdir

""""""""""""""""""""""""""""""""""""""""""""""""""
" Mappings
"

" comma leader is much more handy
let mapleader=','

" automatically map various states properly
function! MultiMap(lhs, rhs)
    exec "noremap  <silent>" . a:lhs . "      " . a:rhs
    exec "inoremap <silent>" . a:lhs . " <C-O>" . a:rhs
    exec "vnoremap <silent>" . a:lhs . " <C-C>" . a:rhs . "gv"
endfunction

" edit this file
call MultiMap("<C-F1>", ":e " . expand("<sfile>:p") . "<CR>")

" enable/disable hlsearch
call MultiMap("<Leader>hl", ":set hlsearch!<CR>")

" ctrl+w should close the buffer
call MultiMap("<Leader>w", ":bd<CR>")

" when text is selected, tab and shift-tab should indent
vnoremap > >gv
vnoremap < <gv

" visual paste should delete to the black hole register first so we don't
" overwrite the unnamed register
vnoremap p "_dp
vnoremap P "_dP

" ctrl+left and ctrl+right should do the right thing in normal mode
noremap  <C-LEFT>  b
noremap  <C-RIGHT> e

" ctrl+shift+left and ctrl+shift+right should do the right thing
noremap  <C-S-LEFT> vb<C-G>
inoremap <C-S-LEFT> <C-\><C-O>vb<C-G>
vnoremap <C-S-LEFT> b

noremap  <C-S-RIGHT> ve<C-G>
inoremap <C-S-RIGHT> <C-\><C-O>ve<C-G>
vnoremap <C-S-RIGHT> e

" shift+j and shift+k should move by pages
nnoremap <S-J> <PageDown>
nnoremap <S-K> <PageUp>

xnoremap <S-J> <S-PageDown>
xnoremap <S-K> <S-PageUp>

""""""""""""""""""""""""""""""""""""""""""""""""""
" Find & Replace
"

function! FindAndReplace()
    normal gv"hy

    if @h =~ "\n"
        return "'<,'>s//"
    else
        return "%s/" . escape(@h, '"\/') . "//"
    endif
endfunction

noremap  <C-H>      :%s/<C-R><C-W>//<Left>
inoremap <C-H> <C-O>:%s/<C-R><C-W>//<Left>
vnoremap <C-H> <C-C>:<C-R>=FindAndReplace()<CR><Left>

""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugins
"

" edit the snippets file for the current filetype
function! EditSnippets()
    let dirs  = substitute(g:snippets_dir, '\', '/', 'g')
    let files = findfile(&ft . ".snippets", dirs, -1)

    for file in files
        exec 'edit ' . file
    endfor
endfunction

call MultiMap("<C-F2>", ':call EditSnippets()<CR>')

" filelist
call MultiMap("<Leader>f", ":FileList<CR>")

" conque
call MultiMap("<C-Space>", ":ConqueTerm cmd<CR>")

" filetype switching
augroup SourceHeaderPairs
    autocmd BufEnter *.cpp,*.cxx,*.cc,*.c let b:fswitchdst  = "h,hpp"
    autocmd BufEnter *.hpp,*.hxx,*.h      let b:fswitchdst  = "cpp,cxx,cc,c"
    autocmd BufEnter *                    let b:fswitchlocs = "./"
augroup end

call MultiMap("<C-F10>", ":FSHere<CR>")

" delimit helpers
let g:delimitMate_expand_cr = 1
let g:loaded_delimitMate = 1

" tab alignment
function! TabAlign(arg) range
    let l:cursor = getpos('.')
    exec a:firstline . "," . a:lastline . "Tabularize " . a:arg
    call setpos('.', l:cursor)
endfunction

noremap  <silent> <Leader>a=            :call TabAlign('/=')<CR>
inoremap <silent> <Leader>a=       <C-O>:call TabAlign('/=')<CR>
noremap  <silent> <Leader>a:            :call TabAlign('/:\zs/l0l1')<CR>
inoremap <silent> <Leader>a:       <C-O>:call TabAlign('/:\zs/l0l1')<CR>
noremap  <silent> <Leader>a,            :call TabAlign('/,\zs/l0l1')<CR>
inoremap <silent> <Leader>a,       <C-O>:call TabAlign('/,\zs/l0l1')<CR>
noremap  <silent> <Leader>a<Space>      :call TabAlign('/\>/l0l1')<CR>
inoremap <silent> <Leader>a<Space> <C-O>:call TabAlign('/\>/l0l1')<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""
" Autocommands
"

" when editing a file, jump to the last cursor position
autocmd BufReadPost * call RestorePosition()
function! RestorePosition()
    if line("'\"") <= line("$")
        execute "normal `\""
    else
        execute "normal $"
    endif
endfunction

" override vim's default ftplugins for indenting our text
autocmd FileType * set formatoptions-=o
autocmd FileType * set formatoptions-=r

""""""""""""""""""""""""""""""""""""""""""""""""""
" Other Environments
"

if filereadable($HOME . "/work.vim")
    source $HOME/work.vim
endif

let g:loaded_vimrc = 1

